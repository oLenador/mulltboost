// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import { Create as $Create } from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as context$0 from "../../../../../../../context/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as time$0 from "../../../../../../../time/models.js";

export class BoostOperation {
    "ID": string;
    "BoosterID": string;
    "Type": BoosterOperationType;
    "AppliedAt": time$0.Time;
    "RevertedAt": time$0.Time;
    "ErrorMsg": string;

    /** Creates a new BoostOperation instance. */
    constructor($$source: Partial<BoostOperation> = {}) {
        if (!("ID" in $$source)) {
            this["ID"] = "";
        }
        if (!("BoosterID" in $$source)) {
            this["BoosterID"] = "";
        }
        if (!("Type" in $$source)) {
            this["Type"] = BoosterOperationType.$zero;
        }
        if (!("AppliedAt" in $$source)) {
            this["AppliedAt"] = null;
        }
        if (!("RevertedAt" in $$source)) {
            this["RevertedAt"] = null;
        }
        if (!("ErrorMsg" in $$source)) {
            this["ErrorMsg"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new BoostOperation instance from a string or object.
     */
    static createFrom($$source: any = {}): BoostOperation {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new BoostOperation($$parsedSource as Partial<BoostOperation>);
    }
}

export enum BoosterCategory {
    /**
     * The Go zero value for the underlying type of the enum.
     */
    $zero = "",

    CategoryConnection = "connection",
    CategoryFlusher = "flusher",
    CategoryFPSBooster = "fps-booster",
    CategoryGames = "games",
    CategoryPrecision = "precision",
};

export enum BoosterLevel {
    /**
     * The Go zero value for the underlying type of the enum.
     */
    $zero = "",

    LevelFree = "free",
    LevelPremium = "premium",
};

export enum BoosterOperationType {
    /**
     * The Go zero value for the underlying type of the enum.
     */
    $zero = "",

    RevertOperationType = "revert",
    ApplyOperationType = "apply",
};

export class CPUInfo {
    "Name": string;
    "Manufacturer": string;
    "Cores": number;
    "Threads": number;
    "BaseFreq": number;
    "MaxFreq": number;
    "Architecture": string;

    /** Creates a new CPUInfo instance. */
    constructor($$source: Partial<CPUInfo> = {}) {
        if (!("Name" in $$source)) {
            this["Name"] = "";
        }
        if (!("Manufacturer" in $$source)) {
            this["Manufacturer"] = "";
        }
        if (!("Cores" in $$source)) {
            this["Cores"] = 0;
        }
        if (!("Threads" in $$source)) {
            this["Threads"] = 0;
        }
        if (!("BaseFreq" in $$source)) {
            this["BaseFreq"] = 0;
        }
        if (!("MaxFreq" in $$source)) {
            this["MaxFreq"] = 0;
        }
        if (!("Architecture" in $$source)) {
            this["Architecture"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new CPUInfo instance from a string or object.
     */
    static createFrom($$source: any = {}): CPUInfo {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new CPUInfo($$parsedSource as Partial<CPUInfo>);
    }
}

export class CPUMetrics {
    "Usage": number;
    "CoreCount": number;
    "ThreadCount": number;
    "Frequency": number;
    "Temperature": number;
    "Cores": CoreMetric[];

    /** Creates a new CPUMetrics instance. */
    constructor($$source: Partial<CPUMetrics> = {}) {
        if (!("Usage" in $$source)) {
            this["Usage"] = 0;
        }
        if (!("CoreCount" in $$source)) {
            this["CoreCount"] = 0;
        }
        if (!("ThreadCount" in $$source)) {
            this["ThreadCount"] = 0;
        }
        if (!("Frequency" in $$source)) {
            this["Frequency"] = 0;
        }
        if (!("Temperature" in $$source)) {
            this["Temperature"] = 0;
        }
        if (!("Cores" in $$source)) {
            this["Cores"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new CPUMetrics instance from a string or object.
     */
    static createFrom($$source: any = {}): CPUMetrics {
        const $$createField5_0 = $$createType1;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("Cores" in $$parsedSource) {
            $$parsedSource["Cores"] = $$createField5_0($$parsedSource["Cores"]);
        }
        return new CPUMetrics($$parsedSource as Partial<CPUMetrics>);
    }
}

export class CoreMetric {
    "Index": number;
    "Usage": number;
    "Frequency": number;
    "Temperature": number;

    /** Creates a new CoreMetric instance. */
    constructor($$source: Partial<CoreMetric> = {}) {
        if (!("Index" in $$source)) {
            this["Index"] = 0;
        }
        if (!("Usage" in $$source)) {
            this["Usage"] = 0;
        }
        if (!("Frequency" in $$source)) {
            this["Frequency"] = 0;
        }
        if (!("Temperature" in $$source)) {
            this["Temperature"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new CoreMetric instance from a string or object.
     */
    static createFrom($$source: any = {}): CoreMetric {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new CoreMetric($$parsedSource as Partial<CoreMetric>);
    }
}

export class DiskMetrics {
    "Drives": DriveMetric[];

    /** Creates a new DiskMetrics instance. */
    constructor($$source: Partial<DiskMetrics> = {}) {
        if (!("Drives" in $$source)) {
            this["Drives"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new DiskMetrics instance from a string or object.
     */
    static createFrom($$source: any = {}): DiskMetrics {
        const $$createField0_0 = $$createType3;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("Drives" in $$parsedSource) {
            $$parsedSource["Drives"] = $$createField0_0($$parsedSource["Drives"]);
        }
        return new DiskMetrics($$parsedSource as Partial<DiskMetrics>);
    }
}

export class DriveMetric {
    "Name": string;
    "Total": number;
    "Used": number;
    "Free": number;
    "UsagePercent": number;
    "ReadSpeed": number;
    "WriteSpeed": number;

    /** Creates a new DriveMetric instance. */
    constructor($$source: Partial<DriveMetric> = {}) {
        if (!("Name" in $$source)) {
            this["Name"] = "";
        }
        if (!("Total" in $$source)) {
            this["Total"] = 0;
        }
        if (!("Used" in $$source)) {
            this["Used"] = 0;
        }
        if (!("Free" in $$source)) {
            this["Free"] = 0;
        }
        if (!("UsagePercent" in $$source)) {
            this["UsagePercent"] = 0;
        }
        if (!("ReadSpeed" in $$source)) {
            this["ReadSpeed"] = 0;
        }
        if (!("WriteSpeed" in $$source)) {
            this["WriteSpeed"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new DriveMetric instance from a string or object.
     */
    static createFrom($$source: any = {}): DriveMetric {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new DriveMetric($$parsedSource as Partial<DriveMetric>);
    }
}

export class DriveTemp {
    "Name": string;
    "Temperature": number;

    /** Creates a new DriveTemp instance. */
    constructor($$source: Partial<DriveTemp> = {}) {
        if (!("Name" in $$source)) {
            this["Name"] = "";
        }
        if (!("Temperature" in $$source)) {
            this["Temperature"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new DriveTemp instance from a string or object.
     */
    static createFrom($$source: any = {}): DriveTemp {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new DriveTemp($$parsedSource as Partial<DriveTemp>);
    }
}

export class GPUInfo {
    "id": string;
    "name": string;
    "vendor": string;
    "device_id": string;
    "driver_version": string;
    "vram_size": number;
    "vram_used": number;
    "core_clock": number;
    "memory_clock": number;
    "temperature": number;
    "usage": number;
    "power_usage": number;
    "is_primary": boolean;
    "is_discrete": boolean;
    "supports_directx": string;
    "supports_opengl": string;
    "supports_vulkan": boolean;
    "created_at": time$0.Time;
    "updated_at": time$0.Time;

    /** Creates a new GPUInfo instance. */
    constructor($$source: Partial<GPUInfo> = {}) {
        if (!("id" in $$source)) {
            this["id"] = "";
        }
        if (!("name" in $$source)) {
            this["name"] = "";
        }
        if (!("vendor" in $$source)) {
            this["vendor"] = "";
        }
        if (!("device_id" in $$source)) {
            this["device_id"] = "";
        }
        if (!("driver_version" in $$source)) {
            this["driver_version"] = "";
        }
        if (!("vram_size" in $$source)) {
            this["vram_size"] = 0;
        }
        if (!("vram_used" in $$source)) {
            this["vram_used"] = 0;
        }
        if (!("core_clock" in $$source)) {
            this["core_clock"] = 0;
        }
        if (!("memory_clock" in $$source)) {
            this["memory_clock"] = 0;
        }
        if (!("temperature" in $$source)) {
            this["temperature"] = 0;
        }
        if (!("usage" in $$source)) {
            this["usage"] = 0;
        }
        if (!("power_usage" in $$source)) {
            this["power_usage"] = 0;
        }
        if (!("is_primary" in $$source)) {
            this["is_primary"] = false;
        }
        if (!("is_discrete" in $$source)) {
            this["is_discrete"] = false;
        }
        if (!("supports_directx" in $$source)) {
            this["supports_directx"] = "";
        }
        if (!("supports_opengl" in $$source)) {
            this["supports_opengl"] = "";
        }
        if (!("supports_vulkan" in $$source)) {
            this["supports_vulkan"] = false;
        }
        if (!("created_at" in $$source)) {
            this["created_at"] = null;
        }
        if (!("updated_at" in $$source)) {
            this["updated_at"] = null;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new GPUInfo instance from a string or object.
     */
    static createFrom($$source: any = {}): GPUInfo {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new GPUInfo($$parsedSource as Partial<GPUInfo>);
    }
}

export class GPUMetrics {
    "Name": string;
    "Usage": number;
    "MemoryUsed": number;
    "MemoryTotal": number;
    "Temperature": number;
    "PowerDraw": number;
    "ClockSpeed": number;
    "MemoryClockSpeed": number;

    /** Creates a new GPUMetrics instance. */
    constructor($$source: Partial<GPUMetrics> = {}) {
        if (!("Name" in $$source)) {
            this["Name"] = "";
        }
        if (!("Usage" in $$source)) {
            this["Usage"] = 0;
        }
        if (!("MemoryUsed" in $$source)) {
            this["MemoryUsed"] = 0;
        }
        if (!("MemoryTotal" in $$source)) {
            this["MemoryTotal"] = 0;
        }
        if (!("Temperature" in $$source)) {
            this["Temperature"] = 0;
        }
        if (!("PowerDraw" in $$source)) {
            this["PowerDraw"] = 0;
        }
        if (!("ClockSpeed" in $$source)) {
            this["ClockSpeed"] = 0;
        }
        if (!("MemoryClockSpeed" in $$source)) {
            this["MemoryClockSpeed"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new GPUMetrics instance from a string or object.
     */
    static createFrom($$source: any = {}): GPUMetrics {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new GPUMetrics($$parsedSource as Partial<GPUMetrics>);
    }
}

export class InitResult {
    "OperationID": string;
    "SubmittedAt": time$0.Time;
    "Success": boolean;
    "Status": OperationStatus;
    "Message": string;
    "Error": any;

    /** Creates a new InitResult instance. */
    constructor($$source: Partial<InitResult> = {}) {
        if (!("OperationID" in $$source)) {
            this["OperationID"] = "";
        }
        if (!("SubmittedAt" in $$source)) {
            this["SubmittedAt"] = null;
        }
        if (!("Success" in $$source)) {
            this["Success"] = false;
        }
        if (!("Status" in $$source)) {
            this["Status"] = OperationStatus.$zero;
        }
        if (!("Message" in $$source)) {
            this["Message"] = "";
        }
        if (!("Error" in $$source)) {
            this["Error"] = null;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new InitResult instance from a string or object.
     */
    static createFrom($$source: any = {}): InitResult {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new InitResult($$parsedSource as Partial<InitResult>);
    }
}

export class MemoryInfo {
    "TotalRAM": number;
    "TotalSlots": number;
    "UsedSlots": number;
    "MemoryType": string;
    "Speed": number;

    /** Creates a new MemoryInfo instance. */
    constructor($$source: Partial<MemoryInfo> = {}) {
        if (!("TotalRAM" in $$source)) {
            this["TotalRAM"] = 0;
        }
        if (!("TotalSlots" in $$source)) {
            this["TotalSlots"] = 0;
        }
        if (!("UsedSlots" in $$source)) {
            this["UsedSlots"] = 0;
        }
        if (!("MemoryType" in $$source)) {
            this["MemoryType"] = "";
        }
        if (!("Speed" in $$source)) {
            this["Speed"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new MemoryInfo instance from a string or object.
     */
    static createFrom($$source: any = {}): MemoryInfo {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new MemoryInfo($$parsedSource as Partial<MemoryInfo>);
    }
}

export class MemoryMetrics {
    "Total": number;
    "Used": number;
    "Available": number;
    "UsagePercent": number;
    "Cached": number;
    "Buffers": number;

    /** Creates a new MemoryMetrics instance. */
    constructor($$source: Partial<MemoryMetrics> = {}) {
        if (!("Total" in $$source)) {
            this["Total"] = 0;
        }
        if (!("Used" in $$source)) {
            this["Used"] = 0;
        }
        if (!("Available" in $$source)) {
            this["Available"] = 0;
        }
        if (!("UsagePercent" in $$source)) {
            this["UsagePercent"] = 0;
        }
        if (!("Cached" in $$source)) {
            this["Cached"] = 0;
        }
        if (!("Buffers" in $$source)) {
            this["Buffers"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new MemoryMetrics instance from a string or object.
     */
    static createFrom($$source: any = {}): MemoryMetrics {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new MemoryMetrics($$parsedSource as Partial<MemoryMetrics>);
    }
}

export class MotherboardInfo {
    "Manufacturer": string;
    "Model": string;
    "BIOS": string;
    "Chipset": string;

    /** Creates a new MotherboardInfo instance. */
    constructor($$source: Partial<MotherboardInfo> = {}) {
        if (!("Manufacturer" in $$source)) {
            this["Manufacturer"] = "";
        }
        if (!("Model" in $$source)) {
            this["Model"] = "";
        }
        if (!("BIOS" in $$source)) {
            this["BIOS"] = "";
        }
        if (!("Chipset" in $$source)) {
            this["Chipset"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new MotherboardInfo instance from a string or object.
     */
    static createFrom($$source: any = {}): MotherboardInfo {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new MotherboardInfo($$parsedSource as Partial<MotherboardInfo>);
    }
}

export class NetworkInfo {
    "Name": string;
    "Type": string;
    "Speed": number;
    "MACAddress": string;
    "IPAddress": string;

    /** Creates a new NetworkInfo instance. */
    constructor($$source: Partial<NetworkInfo> = {}) {
        if (!("Name" in $$source)) {
            this["Name"] = "";
        }
        if (!("Type" in $$source)) {
            this["Type"] = "";
        }
        if (!("Speed" in $$source)) {
            this["Speed"] = 0;
        }
        if (!("MACAddress" in $$source)) {
            this["MACAddress"] = "";
        }
        if (!("IPAddress" in $$source)) {
            this["IPAddress"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new NetworkInfo instance from a string or object.
     */
    static createFrom($$source: any = {}): NetworkInfo {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new NetworkInfo($$parsedSource as Partial<NetworkInfo>);
    }
}

/**
 * NetworkMetrics contÃ©m mÃ©tricas de rede
 */
export class NetworkMetrics {
    "bytes_sent": number;
    "bytes_received": number;
    "packets_sent": number;
    "packets_received": number;
    "errors": number;
    "dropped": number;
    "last_updated": time$0.Time;

    /** Creates a new NetworkMetrics instance. */
    constructor($$source: Partial<NetworkMetrics> = {}) {
        if (!("bytes_sent" in $$source)) {
            this["bytes_sent"] = 0;
        }
        if (!("bytes_received" in $$source)) {
            this["bytes_received"] = 0;
        }
        if (!("packets_sent" in $$source)) {
            this["packets_sent"] = 0;
        }
        if (!("packets_received" in $$source)) {
            this["packets_received"] = 0;
        }
        if (!("errors" in $$source)) {
            this["errors"] = 0;
        }
        if (!("dropped" in $$source)) {
            this["dropped"] = 0;
        }
        if (!("last_updated" in $$source)) {
            this["last_updated"] = null;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new NetworkMetrics instance from a string or object.
     */
    static createFrom($$source: any = {}): NetworkMetrics {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new NetworkMetrics($$parsedSource as Partial<NetworkMetrics>);
    }
}

export class OSInfo {
    "Name": string;
    "Version": string;
    "Architecture": string;
    "BuildNumber": string;

    /** Creates a new OSInfo instance. */
    constructor($$source: Partial<OSInfo> = {}) {
        if (!("Name" in $$source)) {
            this["Name"] = "";
        }
        if (!("Version" in $$source)) {
            this["Version"] = "";
        }
        if (!("Architecture" in $$source)) {
            this["Architecture"] = "";
        }
        if (!("BuildNumber" in $$source)) {
            this["BuildNumber"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new OSInfo instance from a string or object.
     */
    static createFrom($$source: any = {}): OSInfo {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new OSInfo($$parsedSource as Partial<OSInfo>);
    }
}

export enum OperationStatus {
    /**
     * The Go zero value for the underlying type of the enum.
     */
    $zero = "",

    /**
     * Operation Status - Estados das operaÃ§Ãµes
     */
    OperationPending = "pending",
    OperationProcessing = "processing",
    OperationCompleted = "completed",
    OperationFailed = "failed",
    OperationCancelled = "cancelled",
};

export enum Platform {
    /**
     * The Go zero value for the underlying type of the enum.
     */
    $zero = "",

    PlatformWindows = "windows",
    PlatformLinux = "linux",
};

export class QueueItem {
    "ID": string;
    "BoosterID": string;
    "Operation": BoosterOperationType;
    "OperationID": string;
    "SubmittedAt": time$0.Time;
    "Context": context$0.Context;
    "Cancel": context$0.CancelFunc;

    /** Creates a new QueueItem instance. */
    constructor($$source: Partial<QueueItem> = {}) {
        if (!("ID" in $$source)) {
            this["ID"] = "";
        }
        if (!("BoosterID" in $$source)) {
            this["BoosterID"] = "";
        }
        if (!("Operation" in $$source)) {
            this["Operation"] = BoosterOperationType.$zero;
        }
        if (!("OperationID" in $$source)) {
            this["OperationID"] = "";
        }
        if (!("SubmittedAt" in $$source)) {
            this["SubmittedAt"] = null;
        }
        if (!("Context" in $$source)) {
            this["Context"] = null;
        }
        if (!("Cancel" in $$source)) {
            this["Cancel"] = null;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new QueueItem instance from a string or object.
     */
    static createFrom($$source: any = {}): QueueItem {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new QueueItem($$parsedSource as Partial<QueueItem>);
    }
}

export class QueueState {
    "Items": QueueItem[];
    "QueueSize": number;
    "TotalProcessed": number;
    "InProgress": number;

    /** Creates a new QueueState instance. */
    constructor($$source: Partial<QueueState> = {}) {
        if (!("Items" in $$source)) {
            this["Items"] = [];
        }
        if (!("QueueSize" in $$source)) {
            this["QueueSize"] = 0;
        }
        if (!("TotalProcessed" in $$source)) {
            this["TotalProcessed"] = 0;
        }
        if (!("InProgress" in $$source)) {
            this["InProgress"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new QueueState instance from a string or object.
     */
    static createFrom($$source: any = {}): QueueState {
        const $$createField0_0 = $$createType5;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("Items" in $$parsedSource) {
            $$parsedSource["Items"] = $$createField0_0($$parsedSource["Items"]);
        }
        return new QueueState($$parsedSource as Partial<QueueState>);
    }
}

export enum RiskLevel {
    /**
     * The Go zero value for the underlying type of the enum.
     */
    $zero = "",

    RiskLow = "low",
    RiskMedium = "medium",
    RiskHigh = "high",
};

export class StorageInfo {
    "Name": string;
    "Type": string;
    "Size": number;
    "Model": string;
    "Interface": string;

    /** Creates a new StorageInfo instance. */
    constructor($$source: Partial<StorageInfo> = {}) {
        if (!("Name" in $$source)) {
            this["Name"] = "";
        }
        if (!("Type" in $$source)) {
            this["Type"] = "";
        }
        if (!("Size" in $$source)) {
            this["Size"] = 0;
        }
        if (!("Model" in $$source)) {
            this["Model"] = "";
        }
        if (!("Interface" in $$source)) {
            this["Interface"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new StorageInfo instance from a string or object.
     */
    static createFrom($$source: any = {}): StorageInfo {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new StorageInfo($$parsedSource as Partial<StorageInfo>);
    }
}

export class SystemInfo {
    "OS": OSInfo;
    "CPU": CPUInfo;
    "Memory": MemoryInfo;
    "GPU": GPUInfo[];
    "Storage": StorageInfo[];
    "Network": NetworkInfo[];
    "Motherboard": MotherboardInfo;

    /** Creates a new SystemInfo instance. */
    constructor($$source: Partial<SystemInfo> = {}) {
        if (!("OS" in $$source)) {
            this["OS"] = (new OSInfo());
        }
        if (!("CPU" in $$source)) {
            this["CPU"] = (new CPUInfo());
        }
        if (!("Memory" in $$source)) {
            this["Memory"] = (new MemoryInfo());
        }
        if (!("GPU" in $$source)) {
            this["GPU"] = [];
        }
        if (!("Storage" in $$source)) {
            this["Storage"] = [];
        }
        if (!("Network" in $$source)) {
            this["Network"] = [];
        }
        if (!("Motherboard" in $$source)) {
            this["Motherboard"] = (new MotherboardInfo());
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new SystemInfo instance from a string or object.
     */
    static createFrom($$source: any = {}): SystemInfo {
        const $$createField0_0 = $$createType6;
        const $$createField1_0 = $$createType7;
        const $$createField2_0 = $$createType8;
        const $$createField3_0 = $$createType10;
        const $$createField4_0 = $$createType12;
        const $$createField5_0 = $$createType14;
        const $$createField6_0 = $$createType15;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("OS" in $$parsedSource) {
            $$parsedSource["OS"] = $$createField0_0($$parsedSource["OS"]);
        }
        if ("CPU" in $$parsedSource) {
            $$parsedSource["CPU"] = $$createField1_0($$parsedSource["CPU"]);
        }
        if ("Memory" in $$parsedSource) {
            $$parsedSource["Memory"] = $$createField2_0($$parsedSource["Memory"]);
        }
        if ("GPU" in $$parsedSource) {
            $$parsedSource["GPU"] = $$createField3_0($$parsedSource["GPU"]);
        }
        if ("Storage" in $$parsedSource) {
            $$parsedSource["Storage"] = $$createField4_0($$parsedSource["Storage"]);
        }
        if ("Network" in $$parsedSource) {
            $$parsedSource["Network"] = $$createField5_0($$parsedSource["Network"]);
        }
        if ("Motherboard" in $$parsedSource) {
            $$parsedSource["Motherboard"] = $$createField6_0($$parsedSource["Motherboard"]);
        }
        return new SystemInfo($$parsedSource as Partial<SystemInfo>);
    }
}

export class SystemMetrics {
    "CPU": CPUMetrics;
    "Memory": MemoryMetrics;
    "GPU": GPUMetrics;
    "Network": NetworkMetrics;
    "Temperature": TemperatureMetrics;
    "Disk": DiskMetrics;
    "Timestamp": time$0.Time;

    /** Creates a new SystemMetrics instance. */
    constructor($$source: Partial<SystemMetrics> = {}) {
        if (!("CPU" in $$source)) {
            this["CPU"] = (new CPUMetrics());
        }
        if (!("Memory" in $$source)) {
            this["Memory"] = (new MemoryMetrics());
        }
        if (!("GPU" in $$source)) {
            this["GPU"] = (new GPUMetrics());
        }
        if (!("Network" in $$source)) {
            this["Network"] = (new NetworkMetrics());
        }
        if (!("Temperature" in $$source)) {
            this["Temperature"] = (new TemperatureMetrics());
        }
        if (!("Disk" in $$source)) {
            this["Disk"] = (new DiskMetrics());
        }
        if (!("Timestamp" in $$source)) {
            this["Timestamp"] = null;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new SystemMetrics instance from a string or object.
     */
    static createFrom($$source: any = {}): SystemMetrics {
        const $$createField0_0 = $$createType16;
        const $$createField1_0 = $$createType17;
        const $$createField2_0 = $$createType18;
        const $$createField3_0 = $$createType19;
        const $$createField4_0 = $$createType20;
        const $$createField5_0 = $$createType21;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("CPU" in $$parsedSource) {
            $$parsedSource["CPU"] = $$createField0_0($$parsedSource["CPU"]);
        }
        if ("Memory" in $$parsedSource) {
            $$parsedSource["Memory"] = $$createField1_0($$parsedSource["Memory"]);
        }
        if ("GPU" in $$parsedSource) {
            $$parsedSource["GPU"] = $$createField2_0($$parsedSource["GPU"]);
        }
        if ("Network" in $$parsedSource) {
            $$parsedSource["Network"] = $$createField3_0($$parsedSource["Network"]);
        }
        if ("Temperature" in $$parsedSource) {
            $$parsedSource["Temperature"] = $$createField4_0($$parsedSource["Temperature"]);
        }
        if ("Disk" in $$parsedSource) {
            $$parsedSource["Disk"] = $$createField5_0($$parsedSource["Disk"]);
        }
        return new SystemMetrics($$parsedSource as Partial<SystemMetrics>);
    }
}

export class TemperatureMetrics {
    "CPU": number;
    "GPU": number;
    "Motherboard": number;
    "Drives": DriveTemp[];

    /** Creates a new TemperatureMetrics instance. */
    constructor($$source: Partial<TemperatureMetrics> = {}) {
        if (!("CPU" in $$source)) {
            this["CPU"] = 0;
        }
        if (!("GPU" in $$source)) {
            this["GPU"] = 0;
        }
        if (!("Motherboard" in $$source)) {
            this["Motherboard"] = 0;
        }
        if (!("Drives" in $$source)) {
            this["Drives"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new TemperatureMetrics instance from a string or object.
     */
    static createFrom($$source: any = {}): TemperatureMetrics {
        const $$createField3_0 = $$createType23;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("Drives" in $$parsedSource) {
            $$parsedSource["Drives"] = $$createField3_0($$parsedSource["Drives"]);
        }
        return new TemperatureMetrics($$parsedSource as Partial<TemperatureMetrics>);
    }
}

// Private type creation functions
const $$createType0 = CoreMetric.createFrom;
const $$createType1 = $Create.Array($$createType0);
const $$createType2 = DriveMetric.createFrom;
const $$createType3 = $Create.Array($$createType2);
const $$createType4 = QueueItem.createFrom;
const $$createType5 = $Create.Array($$createType4);
const $$createType6 = OSInfo.createFrom;
const $$createType7 = CPUInfo.createFrom;
const $$createType8 = MemoryInfo.createFrom;
const $$createType9 = GPUInfo.createFrom;
const $$createType10 = $Create.Array($$createType9);
const $$createType11 = StorageInfo.createFrom;
const $$createType12 = $Create.Array($$createType11);
const $$createType13 = NetworkInfo.createFrom;
const $$createType14 = $Create.Array($$createType13);
const $$createType15 = MotherboardInfo.createFrom;
const $$createType16 = CPUMetrics.createFrom;
const $$createType17 = MemoryMetrics.createFrom;
const $$createType18 = GPUMetrics.createFrom;
const $$createType19 = NetworkMetrics.createFrom;
const $$createType20 = TemperatureMetrics.createFrom;
const $$createType21 = DiskMetrics.createFrom;
const $$createType22 = DriveTemp.createFrom;
const $$createType23 = $Create.Array($$createType22);
